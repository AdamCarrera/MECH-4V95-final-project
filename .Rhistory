setwd("~/GitHub/MECH-4V95-final-project")
path = "~/data"
data = read.csv(paste0(path, "6.csv"))
getwd()
path = paste0(getwd(), "/data/")
data = read.csv(paste0(path, "6.csv"))
print('hello')
for (value in data$anomaly) {
if (value == TRUE) {
print('hello')
}
}
for (value in data$anomaly) {
print(value)
}
files <- list.files(path=path, pattern="*.csv", full.names=TRUE, recursive=FALSE)
clear
files
for (file in files) {
data = read.csv(file = file)
}
data = ts(data$value, start = 0)
files <- list.files(path=path, pattern="*.csv", full.names=FALSE, recursive=FALSE)
data = read.csv(file = paste0(path, file))
files[1]
for (file in files) {
print(file)
# data = read.csv(file = file)
# data = ts(data$value, start = 0)
}
data = read.csv(file = file)
for (file in files) {
print(file)
data = read.csv(file = paste0(path, file))
# data = ts(data$value, start = 0)
}
object = c(name, data)
for (file in files) {
name = file
data = read.csv(file = paste0(path, file))
data = ts(data$value, start = 0)
object = c(name, data)
}
object = c(name, data)
x <- c(name, data)
x = new(data.frame())
help new()
? new()
for (file in files) {
name = file
data = read.csv(file = paste0(path, file))
data = ts(data$value, start = 0)
x <- new("data set", x = name, y = data)
}
x <- new("track", x = name, y = data)
install.packages("methods")
install.packages("methods")
install.packages("methods")
? new()
big_array <- []
big_array <- array(1:length(files))
big_array <- list
big_array <- list()
append(big_array, 1)
big_array <- append(big_array, 1)
big_array <- list()
big_array <- list()
for (file in files) {
name = file
data = read.csv(file = paste0(path, file))
data = ts(data$value, start = 0)
building = data.frame(name = name, data = data)
}
source('~/.active-rstudio-document', echo=TRUE)
library(lubridate)
library(ggplot2)
library(forecast)
library(tseries)
# Set working directory to this repo
setwd("~/GitHub/MECH-4V95-final-project")
# Set working directory to this repo
setwd("~/GitHub/MECH-4V95-final-project")
# set a path to the csv directory
path_to_files = paste0(getwd(), "/data/")
# load functions for preprocessing and plotting
source(paste0(getwd(), '/preprocessing.R'))
source(paste0(getwd(), '/consumption_plot.R'))
# obtain list of all buildings
data_set <- preprocess(path_to_files)
consumption_plot(data_set = data_set[[1]][1:286,], building_number = 1)
y <- ts(y, start = 0, frequency = 13)
autoplot(y) # plot time series, observe that it is non-stationary
y_2 <- diff(y, differences = 1) # increase differences from 0 to 1
adf.test(y_2, k = 13) # stationary! :) (p < 0.01)
autoplot(y_2) # visually confirm series is stationary, let d = 1
# convert consumption data into time series for forecasting
y <- data_set[[1]][1:286,3]
# Determine 'd' value via adf test
# null hypothesis - non-stationary
# reject if p > 1%, increment 'd'
adf.test(y, k = 13) # non-stationary, (p > 0.01)
# determine order of AR and MA model, count spikes above blue line
Pacf(y_2) # p = 7
acf(y_2) # q = 8
y_2 <- diff(y, differences = 1) # increase differences from 0 to 1
adf.test(y_2, k = 13) # stationary! :) (p < 0.01)
autoplot(y_2) # visually confirm series is stationary, let d = 1
# determine order of AR and MA model, count spikes above blue line
Pacf(y_2) # p = 7
acf(y_2) # q = 8
# build ARIMA model using parameters found previously
tsMod <- Arima(y = y, order = c(7, 1, 8))
# forecast one hour ahead and plot
y_forecast <- forecast(tsMod, h=13)
autoplot(y_forecast)
# forecast was done in the past, so we have access to the real data
# evaluate prediction using RSME and MAE
y_predict <- y_forecast$mean
y_real <- data_set[[1]][286:299,3]
error <- y_predict - y_real
predictionMAE <- mean(abs(error))
predictionRMSE <- sqrt(mean(error^2))
# forecast was done in the past, so we have access to the real data
# evaluate prediction using RSME and MAE
y_predict <- y_forecast$mean
y_real <- data_set[[1]][286:298,3]
error <- y_predict - y_real
predictionRMSE <- sqrt(mean(error^2))
predictionMAE <- mean(abs(error))
